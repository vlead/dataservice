#+TITLE: Setup Dataservice
#+Author: VLEAD
#+Date: [2015-08-25 Tue]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../org-templates/level-0.org

* Introduction

* Install dependendent python packages
Here we use the =setuptools= module from the standard lib, to make a
=setup.py= file, which will install all the python library dependencies.

#+BEGIN_SRC python :tangle setup.py :eval no
from setuptools import setup

requires = [
    'flask',
    'Flask-SQLAlchemy',
    'oursql',
    'flask-cors',
    'flask-testing',
    'requests'
]

setup(
    name='DataService',
    version='0.1',
    install_requires=requires
)

#+END_SRC

* Program to setup the database
We need to create a database and import our schema to it.
The following SQLAlchemy script does that.

Along with that, it also prepopulates some of the data that is fixed and
decided before-hand.

#+BEGIN_SRC python :tangle dbsetup.py :eval no
from src.app import create_app
from src.db import *
import src.config as config


def create_integration_levels():
    int_levels = (0, 1, 2, 3, 4, 5, 6)
    for level in int_levels:
        int_level = IntegrationLevel(level=level)
        int_level.save()


def create_hosting_platforms():
    platforms = ('IIIT', 'BADAL', 'AWS', 'ELSE')
    for plat in platforms:
        platform = HostingPlatform(name=plat)
        platform.save()


def create_type_of_labs():
    types = ('Simulation', 'Remote Triggered',
             'Simulation and Remote Triggered', 'Pilot Phase')
    for type in types:
        lab_type = TypeOfLab(type=type)
        lab_type.save()


def create_institute():
    inst = Institute(name='IIIT Hyderabad',
                     institute_id='IIITH',
                     pic=Name('Venkatesh Chopella'),
                     iic=Name('Raghu Reddy'),
                     pic_email=Email('venkatesh@gmail.com'),
                     iic_email=Email('raghu@gmail.com'))
    inst.save()

    inst = Institute(name='IIT Bombay',
                     institute_id='IITB',
                     pic=Name('Narendra Dhabolkar'),
                     iic=Name('Govind Pansare'),
                     pic_email=Email('dhabolkar@gmail.com'),
                     iic_email=Email('pansare@gmail.com'))

    inst.save()


def create_developer():
    dev = Developer(name=Name('Linus Tarvolds'),
                    email=Email('linus@linux.org'),
                    institute=Institute.get_by_id(1))
    dev.save()

    dev = Developer(name=Name('Claude Shannon'),
                    email=Email('shannon@bell-labs.org'),
                    institute=Institute.get_by_id(2))
    dev.save()


def create_discipline():
    disc = Discipline(name='Computer Science',
                      discipline_id='CSE',
                      dnc=Name('Suresh Purini'),
                      dnc_email=Email('purini@gmail.com'))
    disc.save()

    disc = Discipline(name='Electronics and Communiations Engineering',
                      discipline_id='ECE',
                      dnc=Name('Jayanthi Natarajan'),
                      dnc_email=Email('nataragan@gmail.com'))
    disc.save()


def create_technology():
    tech = Technology(name="Python", version="2.7", foss=True)
    tech.save()
    tech = Technology(name="Apache", version="1.1", foss=True)
    tech.save()
    tech = Technology(name="Mysql", version="3.4", foss=True)
    tech.save()
    tech = Technology(name="Labview", version="4.1", foss=False)
    tech.save()


def create_lab():
    lab = Lab(name='Data Structures',
              lab_id='CSE02',
              institute=Institute.get_by_id(1),
              discipline=Discipline.get_by_id(1),
              integration_level=IntegrationLevel.get_by_id(6),
              developers=[Developer.get_by_id(1)],
              technologies=[Technology.get_by_id(1),
                            Technology.get_by_id(2)],
              repo_url=URL('http://github.com'),
              hosted_url=URL('http://gnu.org'),
              hosted_on=HostingPlatform.get_by_id(1),
              type_of_lab=TypeOfLab.get_by_id(1),
              remarks='First Entry',
              status='Not Deployed',
              is_web_2_compliant_lab=True,
              is_phase_2_lab=True)
    lab.save()
    lab = Lab(name='Radar and Satellite Communication',
              lab_id='ECE05',
              institute=Institute.get_by_id(2),
              discipline=Discipline.get_by_id(2),
              integration_level=IntegrationLevel.get_by_id(5),
              developers=[Developer.get_by_id(2)],
              technologies=[Technology.get_by_id(2),
                            Technology.get_by_id(3)],
              repo_url=URL('http://github.com'),
              hosted_url=URL('http://gnu.org'),
              hosted_on=HostingPlatform.get_by_id(4),
              type_of_lab=TypeOfLab.get_by_id(2),
              remarks='First Entry',
              status='Not Deployed',
              is_web_2_compliant_lab=True,
              is_phase_2_lab=True)
    lab.save()


def create_experiment():
    exp = Experiment(name='Binary Tree',
                     lab=Lab.get_by_id(1),
                     content_url=URL("http://vlabs.ac.in"),
                     content_hosted_on=HostingPlatform.get_by_id(1),
                     simulation_url=URL("http://vlabs.ac.in"),
                     simulation_hosted_on=HostingPlatform.get_by_id(2),
                     technologies=[Technology.get_by_id(1),
                                   Technology.get_by_id(2)])
    exp.save()
    exp = Experiment(name='Doppler Effect',
                     lab=Lab.get_by_id(2),
                     content_url=URL("http://vlabs.ac.org"),
                     content_hosted_on=HostingPlatform.get_by_id(2),
                     simulation_url=URL("http://vlabs.ac.org"),
                     simulation_hosted_on=HostingPlatform.get_by_id(3),
                     technologies=[Technology.get_by_id(2),
                                   Technology.get_by_id(4)])
    exp.save()


def insert_data():
    create_integration_levels()
    create_hosting_platforms()
    create_type_of_labs()
    create_institute()
    create_developer()
    create_discipline()
    create_technology()
    create_lab()
    create_experiment()

if __name__ == "__main__":
    db.create_all(app=create_app(config))
    create_integration_levels()
    create_hosting_platforms()
    create_type_of_labs()
    #create_institute()
    #create_developer()
    #create_discipline()
    #create_technology()
    #create_lab()
    #create_experiment()

#+END_SRC

* Install all dependencies and setup the software
Install all dependencies, including the OS related packages, Python packages,
setup the database, configure the webserver, and finally deploy the
application.

#+BEGIN_SRC sh :tangle setup.sh :eval no
#!/bin/bash
# Shell script to install deb package dependencies as well as python package
# dependencies for dataservice.

# if any proxy server
#PROXY=""
# file to store the generated password
DB_PASS_FILE="db_pass.txt"

if [[ `id -u` -ne 0 ]]; then
  echo "You have to execute this script as super user!"
  exit 1;
fi

# Update the packages
echo "Updating package cache.."
apt-get -y update
if [[ $? -ne 0 ]]; then
  echo "Updating package cache failed!"
  exit 1;
fi

echo "Installing MySQL database.."
if [ ! -f $DB_PASS_FILE ]; then
  # generate a random password for the database and store it in the $DB_PASS_FILE
  # file
#  DBPASS=$(date +%s | sha256sum | head -c 32)
  DBPASS="root"
  echo $DBPASS > $DB_PASS_FILE
fi

# Install MySQL Server in a Non-Interactive mode.
echo "mysql-server mysql-server/root_password password $DBPASS" | sudo debconf-set-selections
echo "mysql-server mysql-server/root_password_again password $DBPASS" | sudo debconf-set-selections
apt-get install -y mysql-server
if [[ $? -ne 0 ]]; then
  echo "FATAL: MySQL installation failed!"
  exit 1;
fi

# Install pre-requsite dependencies: python-dev, mysqld-dev, setuptools,
# apache, mod_wsgi etc.
echo "Installing pre-requisite dependencies.."
apt-get install -y python-dev libmysqld-dev python-setuptools apache2 libapache2-mod-wsgi
if [[ $? -ne 0 ]]; then
  echo "FATAL: Installing pre-requisite dependencies failed!"
  exit 1;
fi

echo "Enabling the mod WSGI on apache"
a2enmod wsgi
if [[ $? -ne 0 ]]; then
  echo "FATAL: Unable to enable mod wsgi!"
  exit 1;
fi

# Installing python dependencies
echo "Installing dependencies.."
#export http_proxy=$PROXY
#export https_proxy=$PROXY
#python setup.py install
pip install Flask Flask-SQLAlchemy oursql requests flask-cors flask-testing
if [[ $? -ne 0 ]]; then
  echo "FATAL: Installation failed!"
  exit 1;
fi

exit 0

#+END_SRC

* Configuring the application and its deployment
  The following program configures the application, configures the web server
  to use WSGI and use the application scripts, and finally calls the database
  setup scripts to actually setup the database with tables.
#+BEGIN_SRC sh :tangle configure.sh :eval no
#!/bin/bash
# Configure the application in the deployment environment
# 1. Update the config.py file with appropriate values
# 2. Update the apache config to server via WSGI
# 3. Run the database setup scripts to setup the database

if [[ `id -u` -ne 0 ]]; then
  echo "You have to execute this script as super user!"
  exit 1;
fi

ABS_PATH_DS=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

update_app_config () {
  CONFIG_FILE="src/config.py"
  DB_USER="root"
  DB_PASS=$(cat db_pass.txt)
  DB_PASS="root"
  DB_NAME="dataservice"
  DB_SERVER="localhost"

  # the list of white-listed IPs for POST/PUT requests to data service
  WHITELIST_IPS="['127.0.0.1']"

  # the list of allowed domains for CORS
  ALLOWED_ORIGINS="['*']"

  echo "Updating config.py.."
  # Update parts of the DB URI
  sed -i "s/<userid>/$DB_USER/" $ABS_PATH_DS/$CONFIG_FILE
  sed -i "s/<password>/$DB_PASS/" $ABS_PATH_DS/$CONFIG_FILE
  sed -i "s/<servername>/$DB_SERVER/" $ABS_PATH_DS/$CONFIG_FILE
  sed -i "s/<db_name>/$DB_NAME/" $ABS_PATH_DS/$CONFIG_FILE
  # update SQLALCHEMY_ECHO
  sed -i "s/^SQLALCHEMY_ECHO.*$/SQLALCHEMY_ECHO = False/" $ABS_PATH_DS/$CONFIG_FILE
  # update WHITELIST_IPS
  #sed -i "s/^WHITELIST_IPS.*$/WHITELIST_IPS = $WHITELIST_IPS/" $CONFIG_FILE
  # update ALLOWED_ORIGINS
  #sed -i "s/^ALLOWED_ORIGINS.*$/ALLOWED_ORIGINS = $ALLOWED_ORIGINS/" $CONFIG_FILE

  # NOTE: this is hardcoded now..somehow the log file when dynamically created
  # is owned by root. then the app fails to run.. hence the following is
  # necessary
  touch /var/www/dataservice.log
  chmod a+w /var/www/dataservice.log
}

update_apache_config() {
  PROC_NAME="dataservice"
  WSGI_SCRIPT="dataservice.wsgi"
  APACHE_VHOST_FILE="/etc/apache2/sites-available/default"

  sed -i "/<\/VirtualHost>/i \
    WSGIScriptAlias / $ABS_PATH_DS/$WSGI_SCRIPT
  " $APACHE_VHOST_FILE

  #sed -i '/<\/VirtualHost>/i \
  #  WSGIDaemonProcess $PROC_NAME user=www-data group=www-data threads=5
  #  WSGIScriptAlias / $ABS_PATH_DS/$WSGI_SCRIPT

  #  <Directory $ABS_PATH_DS>
  #    WSGIProcessGroup $PROC_NAME
  #    WSGIApplicationGroup %{GLOBAL}
  #    Order deny,allow
  #    Allow from all
  #  </Directory>
  #' $APACHE_VHOST_FILE

}

setup_db() {
  echo "Creating database: $DB_NAME"
  mysql -u $DB_USER -p$DB_PASS -Bse "create database $DB_NAME;"
  if [[ $? -ne 0 ]]; then
    echo "Failed to create database $DB_NAME"
    exit 1;
  fi

#  python $ABS_PATH_DS/dbsetup.py
#  if [[ $? -ne 0 ]]; then
#    echo "Failed to create tables in database $DB_NAME"
#    exit 1;
#  fi
}

update_app_config
if [[ $? -ne 0 ]]; then
  echo "FATAL: Failed to update application config.py"
  exit 1;
fi
update_apache_config
if [[ $? -ne 0 ]]; then
  echo "FATAL: Failed to update apache config"
  exit 1;
fi

service apache2 restart

setup_db
exit 0;
#+END_SRC

* Program to Migrating and populating data
  Script to migrate and populate the data from the old database
#+BEGIN_SRC python :tangle normalize_sanitize_migrate_old_to_new_data.py :eval no
# -*- coding: utf-8 -*-

from sqlalchemy import create_engine

from src.app import create_app
from src.db import *

from src import config


instt_map = {
    'IIIT-H': 'iiith',
    'IIT-Bombay': 'iitb',
    'IIT Kharagpur': 'iitkgp',
    'IIT-Kharagpur': 'iitkgp',
    'IIT-Madras': 'iitm',
    'IIT-Delhi': 'iitd',
    'COEP': 'coep',
    'Dayalbagh': 'dei',
    'IIT-Kanpur': 'iitk',
    'IIT-Guwahati': 'iitg',
    'IIT-Roorkee': 'iitr',
    'NIT-K': 'nitk',
    'Amrita University': 'amrita'
}


def populate_tech():
    print "Populating technologies table.."

    result = conn.execute('select * from technologies')
    for row in result:
        # id = row[0]
        print "row: %s" % row
        name = str(row[1].strip())
        if row[2] == "Yes":
            foss = True
        elif row[2] == "No":
            foss = False
        else:
            foss = None

        if not foss:
            new_tech = Technology(name=name)
        else:
            new_tech = Technology(name=name, foss=foss)
        print new_tech.name, new_tech.foss
        new_tech.save()
    print "Done saving technologies.."


def populate_instt():
    print "Populating institutes table.."

    instts = [
        ('iiith', 'IIIT Hyderabad', 'Prof. Venkatesh Choppella',
            'venkatesh.choppella@iiit.ac.in', 'Prof. Raghu Reddy',
            'raghu.reddy@iiit.ac.in'),
        ('iitb', 'IIT Bombay', 'Prof. Anil Kulkarni', 'anil@ee.iitb.ac.in',
            'Prof. Santosh Norohna', 'noronha@che.iitb.ac.in'),
        ('iitd', 'IIT Delhi', 'Prof. Ranjan Bose', 'rbose.iitd@gmail.com',
            'Prof. Suresh Bhalla', 'sbhalla@civil.iitd.ac.in'),
        ('iitr', 'IIT Roorkee', 'Prof. Vinod Kumar',
            'gargpfce@iitr.ernet.in', 'Prof Vinod Kumar', 'vinodfee@gmail.com'),
        ('iitg', 'IIT Guwahati', 'Prof. Ratnajit Bhattacharjee',
            'ratnajit@iitg.ernet.in', 'Dr. Santosh Biswas',
            'santosh_biswas@iitg.ernet.in'),
        ('iitk', 'IIT Kanpur', 'Prof.  Kantesh Balani', 'kbalani@iitk.ac.in',
            'Prof. Kantesh Balani', 'kbalani@iitk.ac.in'),
        ('iitkgp', 'IIT Kharagpur', 'Prof. C S Kumar',
            'kumar@mech.iitkgp.ernet.in', None, None),
        ('iitm', 'IIT Madras', 'Prof. P Sriram', 'sriram@ae.iitm.ac.in',
            None, None),
        ('nitk', 'NIT Surathkal', 'Prof. K V Gangadharan',
            'kvganga@nitk.ac.in', 'Prof. K V Gangadharan', 'kvganga@nitk.ac.in'),
        ('amrita', 'Amrita University', 'Prof. Krishnashree Achuthan',
            'krishna@amrita.edu', 'Prof. Shyam Diwakar', 'shyam.diwakar@gmail.com'),
        ('coep', 'College of Engineering, Pune', 'Prof. Sudhir Agashe',
            'sda.instru@coep.ac.in', 'S. U Ghumbre', 'shashi.comp@coep.ac.in'),
        ('dei', 'Dayalbagh Educational Institute', 'Prof. Soami P Satsangee',
            'deiusic@gmail.com', 'Rahul Swarup Sharma', 'rahulswarup@rediffmail.com')
    ]

    for row in instts:
        args = {}
        args['institute_id'] = row[0]
        args['name'] = row[1].strip()
        args['pic'] = Name(row[2].strip())
        args['pic_email'] = Email(row[3].strip())
        if row[4]:
            args['iic'] = Name(row[4].strip())
        if row[5]:
            args['iic_email'] = Email(row[5].strip())

        instt = Institute(**args)
        print instt
        #instt.save()

    print "Done saving institutes.."


def populate_disc():
    print "Populating disciplines table.."

    discs = [
        ('aero', 'Aerospace Engineering', None, None),
        ('biotech', 'Biotechnology and Biomedical Engineering',
         'Prof. Bipin Nair', 'bipin@amrita.edu'),
        ('chem-engg', 'Chemical Engineering', 'Prof. Santosh Noronha',
         'noronha@che.iitb.ac.in'),
        ('chem', 'Chemical Sciences', 'Prof. Soami P Satsangee',
         'deiusic@gmail.com'),
        ('civil', 'Civil Engineering', 'Prof. P K Garg',
         'gargpfce@iitr.ernet.in'),
        ('cse', 'Computer Science and Engineering', 'Prof. Suresh Purini',
         'suresh.purini@iiit.ac.in'),
        ('ee', 'Electrical Engineering', 'Prof. Ratnajit Bhattacharjee',
         'ratnajit@iitg.ernet.in'),
        ('ece', 'Electronics and Communication', 'Prof. Mahesh Abegaonkar',
         'mpjosh@care.iitd.ernet.in'),
        ('hmt', 'Humanities', None, None),
        ('mech', 'Mechanical Engineering', 'Prof. C S Kumar',
         'kumar@mech.iitkgp.ernet.in'),
        ('phy-sc', 'Physical Sciences', 'Prof. Anjan Kumar Gupta',
         'anjankg@iitk.ac.in'),
        ('tex-engg', 'Textile Engineering', None, None),
        ('dsgn-engg', 'Design Engineering', None, None),
        ('mat-sc', 'Material Sciences', None, None)
    ]

    for row in discs:
        args = {}
        args['discipline_id'] = row[0]
        args['name'] = row[1].strip()
        if row[2]:
            args['dnc'] = Name(row[2].strip())
        if row[3]:
            args['dnc_email'] = Email(row[3].strip())

        disc = Discipline(**args)
        print disc
        disc.save()

    print "Done saving disciplines.."


def populate_devs():
    print "Populating developers table.."

    result = conn.execute('select * from developers')
    for row in result:
        if row[0] == "not known":
            continue

        print 'instt', 'name', 'email'
        print row[0], row[1], row[2]
        instt_name = row[0]
        instt_id = instt_map[instt_name]

        instt = Institute.get_by_institute_id(instt_id)
        print instt
        print instt.id, instt.name
        dev = Developer(email=Email(row[2].strip()),
                        name=Name(row[1].strip()),
                        institute=instt)
        print dev
        dev.save()

    print "Done saving developers.."


def populate_labs():
    print "Populating labs table.."

    no_lab_id_ctr = 1

    result = conn.execute('select * from labs')
    for row in result:
        id = row[0]
        lab_id = row[1]
        name = row[2]
        dev = row[3]
        repo_url = row[4]
        src_avail = row[5]
        hosted_url = row[6]
        lab_deployed = row[7]
        num_exps = row[8]
        content = row[9]
        simu = row[10]
        web_2_comp = row[11]
        lab_type = row[12]
        auto_hostable = row[13]
        remarks = row[14]
        int_level = row[15]
        status = row[16]
        inst_id = row[17]
        disc_id = row[18]
        phase_2 = row[19]

        print '===='
        print 'id', id
        print 'lab_id', lab_id
        print 'name', name
        print 'developer', dev
        print 'repo_url', repo_url
        print 'src_avail', src_avail
        print 'hosted_url', hosted_url
        print 'lab_deployed', lab_deployed
        print 'num_exps', num_exps
        print 'content', content
        print 'simu', simu
        print 'web_2_comp', web_2_comp
        print 'type', lab_type
        print 'auto_hostable', auto_hostable
        print 'remarks', remarks
        print 'int_level', int_level
        print 'status', status
        print 'inst_id', inst_id
        print 'disc_id', disc_id
        print 'phase_2', phase_2
        print '===='

        lab_id = lab_id.strip()
        if lab_id == "Unknown":
            #lab_id = None
            lab_id = 'no_lab_id' + str(no_lab_id_ctr)
            no_lab_id_ctr += 1

        name = str(name.strip())

        # sanitize, normalize
        # TODO: review!
        repo_url = repo_url.strip()
        if repo_url == "Unknown" or repo_url == "Unkown":
            repo_url = None

        # sanitize, normalize
        # TODO: review!
        # add to remarks
        if src_avail == "Yes":
            pass
        elif src_avail == "No":
            pass
        elif src_avail == "Partially Available":
            remarks += ' ;sources_available: Partially Available; '

        # sanitize, normalize
        # TODO: review!
        hosted_url = hosted_url.strip()
        if hosted_url.find('http') < 0:
            remarks += ' ;hosted_url: %s; ' % hosted_url
            hosted_url = None
        if hosted_url == "Link is redirecting to http://vlab.co.in/institute_detail.php?ins=003 , Unable to view the lab":
            hosted_url = "http://vlab.co.in/institute_detail.php?ins=003"
            remarks += " ;hosted_url: Link is redirecting to http://vlab.co.in/institute_detail.php?ins=003 , Unable to view the lab"

        # sanitize, normalize
        # TODO: review!
        # add to remarks
        lab_deployed = lab_deployed.strip()
        if lab_deployed == "Yes":
            pass
        elif lab_deployed == "Yes, On Amrita":
            pass
            remarks += ' ;is_deployed: On Amrita; '
        elif lab_deployed == "No":
            pass
        else:
            pass

        # sanitize, normalize
        # TODO: review!
        # add to remarks
        content = content.strip()
        if content == "No":
            content = False
        elif content == "Unknown":
            content = None
        elif content == "Yes":
            content = True
        else:
            remarks += ' ;is_content_avail: %s; ' % content
            content = True

        # sanitize, normalize
        # TODO: review!
        simu = simu.strip()
        if simu == "No":
            simu = False
        elif simu == "Unknown":
            simu = None
        elif simu == "Yes":
            simu = True
        elif simu.find('Unable') >= 0:
            remarks += ' ;is_simulation_avail: %s; ' % simu
            simu = None
        else:
            remarks += ' ;is_simulation_avail: %s; ' % simu
            simu = True

        # sanitize, normalize
        # TODO: review!
        web_2_comp = web_2_comp.strip()
        if web_2_comp == "Yes":
            web_2_comp = True
        elif web_2_comp == "No":
            web_2_comp = False
        else:
            web_2_comp = None

        # sanitize, normalize
        # TODO: review!
        lab_type = lab_type.strip()
        simu_labs = ['Simulation Lab', 'Simuation Lab', 'Simulation',
                     'simulation lab']
        rt_labs = ['Remote Triggered', 'Remote Triggered  Lab (Pilot Phase)',
                   'Remote Triggered Lab', 'Remote Triggered Lab (Pilot phase)']
        if lab_type in simu_labs:
            lab_type = TypeOfLab.get_by_type('Simulation')
            #lab_type = 'Simulation'
        elif lab_type in rt_labs:
            #lab_type = 'Remote Triggered'
            lab_type = TypeOfLab.get_by_type('Remote Triggered')
        elif lab_type == 'Simulation Lab + Remote Triggered':
            #lab_type = 'Simulation Lab + Remote Triggered'
            lab_type = TypeOfLab.get_by_type('Simulation and Remote Triggered')
        elif lab_type == 'Unknown' or lab_type == "":
            lab_type = None
        elif lab_type == 'Pilot phase lab' or lab_type == 'pilot phase':
            #lab_type = 'Pilot phase'
            lab_type = TypeOfLab.get_by_type('Pilot Phase')

        if phase_2 == 1:
            phase_2 = True
        else:
            phase_2 = False

        # from the instt_id get the institute object
        instt = conn.execute('select * from institutes where id=%s' % inst_id)
        for row in instt:
            #print row[0], row[1], row[2]
            pass
        # from the name of the instt, get the instt_id and then get the instt
        # obj in the new db
        cur_instt = Institute.get_by_institute_id(instt_map[row[1]])

        # from the disc_id get the institute object
        disc = conn.execute('select * from disciplines where id=%s' % disc_id)
        for row in disc:
            print "name: %s" % row[1]
            disc_name = row[1].strip()
            if disc_name == "Electronics and Communications":
                disc_name = "Electronics and Communication"

        if disc_name == "Unknown":
            cur_disc = None
        else:
            # from the name of the disc, get the id in the new db
            cur_disc = Discipline.query.filter_by(name=disc_name).first()

        print "cur disc"
        print cur_disc

        # get the integration level obj from the level
        int_level = IntegrationLevel.get_by_level(int_level)

        # get this lab's developers
        devels = []
        devs = conn.execute('select * from developers_engaged where lab_id=%s' %
                            id)
        for row in devs:
            #email id is row[2]
            dev = Developer.query.filter_by(email=row[2]).first()
            devels.append(dev)

        # get this lab's technologies
        techs = []
        result = conn.execute('select a.lab_id, a.tech_id, b.technology_name '
                              'from technologies_used a, technologies b where '
                              'a.tech_id=b.id and lab_id=' + str(id))
        for row in result:
            #tech name is row[2]
            tech = Technology.query.filter_by(name=row[2]).first()
            techs.append(tech)

        print '===='
        print 'id', id
        print 'lab_id', lab_id
        print 'name', name
        print 'repo_url', repo_url
        print 'hosted_url', hosted_url
        print 'web_2_comp', web_2_comp
        print 'type', lab_type
        print 'remarks', remarks
        print 'int_level', int_level
        print 'status', status
        print 'inst_id', cur_instt.id
        print 'disc_id', cur_disc.id if cur_disc else None,
        print 'phase_2', phase_2
        print 'developers', devels
        print 'technologies', techs
        print '===='
        #print raw_input('....')

        args = {}
        args['lab_id'] = lab_id
        args['name'] = name
        args['institute'] = cur_instt
        if cur_disc:
            args['discipline'] = cur_disc
        args['integration_level'] = int_level
        if repo_url:
            args['repo_url'] = URL(repo_url)
        if hosted_url:
            args['hosted_url'] = URL(hosted_url)
        if lab_type:
            args['type_of_lab'] = lab_type
        if remarks:
            args['remarks'] = str(remarks)
        if status:
            args['status'] = str(status)
        if web_2_comp:
            args['is_web_2_compliant_lab'] = web_2_comp
        if phase_2:
            args['is_phase_2_lab'] = phase_2
        if len(devels):
            args['developers'] = devels
        if len(techs):
            args['technologies'] = techs

        lab = Lab(**args)
        print lab
        try:
            lab.save()
        except Exception, e:
            print e
            raw_input('encountered exception. halted. press key to resume..')

    print "Done saving labs.."


def populate_exps():
    print "Populating experiments table.."

    result = conn.execute('select * from experiments')
    for row in result:
        print 'lab_id', 'id', 'name', 'content_url', 'simulation_url'
        try:
            print row[0], row[1], row[2], row[3], row[4]
        except:
            pass

        lab = conn.execute('select * from labs where id=%s' % row[0])
        for nrow in lab:
            #print nrow[0], nrow[1], nrow[2], nrow[3]
            pass
        #print nrow[2]
        cur_lab = Lab.query.filter_by(name=nrow[2].strip()).first()
        print cur_lab
        print cur_lab.name, cur_lab.lab_id

        exp_name = row[2].strip()
        iso885915_utf_map = {
                u"\u2019":  u"'",
                u"\u2018":  u"'",
                u"\u201c":  u'"',
                u"\u201d":  u'"'
        }
        utf_map = dict([(ord(k), ord(v)) for k,v in iso885915_utf_map.items()])
        exp_name = exp_name.translate(utf_map).encode('iso-8859-15')
        # for the particular exp with id 1553 in the old database, change the
        # name
        if row[1] == 1553 and "\xa0" in exp_name:
            exp_name = "Relationship between guide ?g and ?a"
        exp_name = str(exp_name)
        print exp_name

        content_url = row[3].strip()
        # formatting errors in URL
        if content_url == "cp.freehostia.com/login/":
            content_url = "http://cp.freehostia.com/login/"
        if content_url == "iitkgp.vlab.co.in/?sub=37&brch=110&sim=243&cnt=512":
            content_url = "http://iitkgp.vlab.co.in/?sub=37&brch=110&sim=243&cnt=512"
        if content_url == "iitkgp.vlab.co.in/?sub=79&brch=262&sim=1299&cnt=1":
            content_url = "http://iitkgp.vlab.co.in/?sub=79&brch=262&sim=1299&cnt=1"
        if content_url == "Under Construction, http://iitg.vlab.co.in/?sub=59&brch=164&sim=1398&cnt=2931":
            content_url = "http://iitg.vlab.co.in/?sub=59&brch=164&sim=1398&cnt=2931"
        if content_url == "Under Construction, http://iitg.vlab.co.in/?sub=59&brch=164&sim=1399&cnt=2950":
            content_url = "http://iitg.vlab.co.in/?sub=59&brch=164&sim=1399&cnt=2950"

        # WRONG content URLs in the old database!!!!!!!!!!!!!
        # I had to manually find out the correct ones, and hard code them here!!
        if content_url == "http://amrita.vlab.co.in/?sub=3&brch=187&sim=878&cnt=1"\
                and exp_name == "Isolation of Mitochondria":
            content_url = "http://vlab.amrita.edu/?sub=3&brch=187&sim=327&cnt=2"
        if content_url == "http://iitkgp.vlab.co.in/?sub=37&brch=110&sim=252&cnt=7"\
                and exp_name == "Thickness Measurement Using Ellipsometer":
            content_url = "http://iitkgp.vlab.co.in/?sub=37&brch=110&sim=253&cnt=7"
        if content_url == "http://iitkgp.vlab.co.in/?sub=37&brch=110&sim=253&cnt=7"\
                and exp_name == "MOSFET SPICE Parameter Extraction":
            content_url = "http://iitkgp.vlab.co.in/?sub=37&brch=110&sim=254&cnt=7"
        if content_url == "http://iitkgp.vlab.co.in/?sub=37&brch=110&sim=255&cnt=7"\
                and exp_name == "Determination of Vth of a MOSFET":
            content_url = "http://iitkgp.vlab.co.in/?sub=37&brch=110&sim=256&cnt=7"
        if content_url == "http://iitkgp.vlab.co.in/?sub=37&brch=110&sim=255&cnt=7"\
                and exp_name == "JFET Characterization":
            content_url = "http://iitkgp.vlab.co.in/?sub=37&brch=110&sim=257&cnt=7"
        if content_url == "http://vls1.iitkgp.ernet.in/vls_web/experiments/experiment.php?expId=234"\
                and exp_name == "Position Analysis of a 4 Bar RRRR Non Grashofian D":
            content_url = "http://vls1.iitkgp.ernet.in/vls_web/experiments/experiment.php?expId=235"
        if content_url == "http://103.37.201.113/vlab/view.php?expid=exp1369311990&cnid=0"\
                and exp_name == "ECG Feature Extraction And Analysis":
            content_url = "http://103.37.201.113/vlab/view.php?expid=exp1367664540&cnid=0"
        if content_url == "http://iitb.vlab.co.in/index.php?sub=8&brch=117&sim=1069&cnt=2005"\
                and exp_name == "Frequency response":
            content_url = "http://iitb.vlab.co.in/index.php?sub=8&brch=117&sim=1070&cnt=2008"
        if content_url == "http://www.aero.iitb.ac.in/pratham/virtuallaboratory/experiment/experiment.php"\
                and exp_name == "Polar Orbit":
            content_url = "http://www.aero.iitb.ac.in/pratham/virtuallaboratory/experiment/polar1.php"

        if content_url.find('No content') >= 0 or\
                content_url.find('deploy.v') >= 0:
            content_url = None

        simu_url = row[4].strip()
        if simu_url == "Under Construction, http://iitg.vlab.co.in/?sub=59&brch=164&sim=1398&cnt=4":
            simu_url = "http://iitg.vlab.co.in/?sub=59&brch=164&sim=1398&cnt=4"
        if simu_url == "under Construction, http://iitg.vlab.co.in/?sub=59&brch=164&sim=1399&cnt=4":
            simu_url = "http://iitg.vlab.co.in/?sub=59&brch=164&sim=1399&cnt=4"
        if simu_url == "http://iitkgp.vlab.co.in/?sub=39&brch=125&sim=637&cnt=4"\
                and exp_name == "DF-Part6: Interrupt driven data transfer from ADC":
            simu_url = "http://iitkgp.vlab.co.in/?sub=39&brch=125&sim=1228&cnt=4"
        if simu_url == "http://vls1.iitkgp.ernet.in/vls_web/experiments/experiment.php?expId=234#"\
                and exp_name == "Position Analysis of a 4 Bar RRRR Non Grashofian D":
            simu_url = "http://vls1.iitkgp.ernet.in/vls_web/experiments/experiment.php?expId=235#"
        if simu_url == "http://iitd.vlab.co.in/?sub=67&brch=185&sim=470&cnt=4"\
                and exp_name == "DC Motor Speed Control":
            simu_url = "http://iitd.vlab.co.in/?sub=67&brch=185&sim=473&cnt=4"
        if simu_url == "http://iitd.vlab.co.in/?sub=67&brch=185&sim=473&cnt=4"\
                and exp_name == "Induction Motor Starting and Braking":
            simu_url = "http://iitd.vlab.co.in/?sub=67&brch=185&sim=1014&cnt=4"
        if simu_url == "http://iitd.vlab.co.in/?sub=67&brch=185&sim=1014&cnt=4"\
                and exp_name == "V/F Control Of VSI Fed Three-Phase Induction Motor":
            simu_url = "http://iitd.vlab.co.in/?sub=67&brch=185&sim=1046&cnt=4"
        if simu_url == "http://iitd.vlab.co.in/?sub=65&brch=180&sim=294&cnt=1478"\
                and exp_name == "Experiment of Microwave Cavity":
            simu_url = "http://iitd.vlab.co.in/?sub=65&brch=180&sim=295&cnt=1481"
        if simu_url == "http://sage.virtual-labs.ac.in/home/pub/21/" and\
                exp_name == "SQL 3":
            simu_url = "http://sage.virtual-labs.ac.in/home/pub/22/"

        if simu_url.lower().find('no simulation') >= 0 or\
                simu_url.find('Link not found') >= 0 or\
                simu_url.find('deploy.v') >= 0:
            simu_url = None

        args = {}
        args['lab'] = cur_lab
        args['name'] = exp_name
        if content_url:
            args['content_url'] = URL(content_url)
        if simu_url:
            args['simulation_url'] = URL(simu_url)

        exp = Experiment(**args)
        print exp
        #exp.save()

    print "Done saving experiments.."


if __name__ == "__main__":

    # DB URI of the older database: from which we are migrating..
    # NOTE: the new DB URI: to which we are migrating is mentioned in the
    # config.py file under src/
    old_db_uri = 'mysql+oursql://root:<password>@localhost/vlabs_database'

    # instantiate a engine
    old_db = create_engine(old_db_uri)
    # get a connection
    conn = old_db.connect()

    # create the Flask-SQLAlchemy app
    app = create_app(config)

    # populate some data..
    populate_tech()
    populate_instt()
    populate_disc()
    populate_devs()
    populate_labs()
    populate_exps()

    conn.close()
#+END_SRC
* Migrate the data..
#+BEGIN_SRC sh :tangle migrate.sh :eval no
#!/bin/bash

ABS_PATH_DS=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
DB_PASS=$(cat db_pass.txt)
MIG_SCRIPT="normalize_sanitize_migrate_old_to_new_data.py"

# dump the older database..
mysql -u root -p$DB_PASS -Bse "create database vlabs_database;"
mysql -u root -p$DB_PASS vlabs_database < ../db/vlabs_database.sql

# change the migration script to have the password
sed -i "s/<password>/$DB_PASS/" $ABS_PATH_DS/$MIG_SCRIPT

# run the migration script
python $ABS_PATH_DS/$MIG_SCRIPT
#+END_SRC
* Run Test Cases
#+BEGIN_SRC sh :tangle run_tests.sh :eval no
#!/bin/bash
# Run the tests
python -m tests.test_db
python -m tests.test_api

#+END_SRC
